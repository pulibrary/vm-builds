---
- name: Exit early if role disabled
  when: not prepare_security_firstboot | bool
  ansible.builtin.meta: end_play
  tags: ["firstboot"]

- name: Create state dir for first-boot markers
  ansible.builtin.file:
    path: /var/lib/security-firstboot
    state: directory
    mode: "0755"
  tags: ["firstboot"]

- name: Ensure env file exists (cloud-init will overwrite/populate at launch)
  ansible.builtin.copy:
    dest: "{{ security_env_file }}"
    owner: root
    group: root
    mode: "0600"
    content: |
      # populated by cloud-init user-data on first boot
      # BIGFIX_MASTHEAD_URL=
      # RAPID7_TOKEN=
      # RAPID7_ATTRIBUTES="Library Systems"
    force: no
  tags: ["firstboot"]

- name: Install first-boot helper scripts
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0755"
  loop:
    - {
        src: "bigfix-firstboot.sh.j2",
        dest: "/usr/local/sbin/bigfix-firstboot.sh",
      }
    - {
        src: "rapid7-firstboot.sh.j2",
        dest: "/usr/local/sbin/rapid7-firstboot.sh",
      }
    - {
        src: "falcon-firstboot.sh.j2",
        dest: "/usr/local/sbin/falcon-firstboot.sh",
      }
  tags: ["firstboot"]

- name: Install systemd units (oneshot; run once on first boot)
  ansible.builtin.copy:
    dest: "/etc/systemd/system/{{ item.name }}"
    mode: "0644"
    content: "{{ item.content }}"
  loop:
    - name: bigfix-firstboot.service
      content: |
        [Unit]
        Description=BigFix first-boot installer
        After=network-online.target cloud-final.service
        Wants=network-online.target
        ConditionPathExists=!/var/lib/security-firstboot/bigfix.done

        [Service]
        Type=oneshot
        EnvironmentFile=-{{ security_env_file }}
        ExecStart=/usr/local/sbin/bigfix-firstboot.sh
        RemainAfterExit=yes

        [Install]
        WantedBy=multi-user.target
    - name: rapid7-firstboot.service
      content: |
        [Unit]
        Description=Rapid7 first-boot installer
        After=network-online.target cloud-final.service
        Wants=network-online.target
        ConditionPathExists=!/var/lib/security-firstboot/rapid7.done

        [Service]
        Type=oneshot
        EnvironmentFile=-{{ security_env_file }}
        ExecStart=/usr/local/sbin/rapid7-firstboot.sh
        RemainAfterExit=yes

        [Install]
        WantedBy=multi-user.target
    - name: falcon-firstboot.service
      content: |
        [Unit]
        Description=CrowdStrike Falcon first-boot installer
        After=network-online.target cloud-final.service
        Wants=network-online.target
        ConditionPathExists=!/var/lib/security-firstboot/falcon.done

        [Service]
        Type=oneshot
        EnvironmentFile=-{{ security_env_file }}
        ExecStart=/usr/local/sbin/falcon-firstboot.sh
        RemainAfterExit=yes

        [Install]
        WantedBy=multi-user.target
  notify:
    - systemd-daemon-reload
    - enable-firstboot-services
  tags: ["firstboot"]
